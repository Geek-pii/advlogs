$breakpoints: ( "phone" : 320px, "phone-wide" : 480px, "phablet" : 560px, "tablet-small": 640px, "tablet" : 768px, "tablet-wide" : 992px, "desktop" : 1240px, "desktop-wide": 1440px);
@mixin mq($width, $type: min) {
  @if map_has_key($breakpoints, $width) {
    $width: map_get($breakpoints, $width);
    @if $type==max {
      $width: $width - 1px;
    }
    @media only screen and (#{$type}-width: $width) {
      @content;
    }
  }
}

@function em($pixels, $context: $font-size) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }

  @if (unitless($context)) {
    $context: $context * 1px;
  }

  @return $pixels / $context * 1em;
}

@mixin font-source($font:'', $size: false, $colour: false, $weight: false, $lh: false) {
  @if $font {
    font-family: $font;
  }
  @if $size {
    font-size: $size;
  }
  @if $colour {
    color: $colour;
  }
  @if $weight {
    font-weight: $weight;
  }
  @if $lh {
    line-height: $lh;
  }
}

@mixin margin-center {
  margin: {
    left: auto;
    right: auto;
  }
}

@mixin position($position: relative, $top: 0, $bottom: unset, $left: unset, $right: unset, $zIndex: 0) {
  position: $position;
  top: $top;
  bottom: $bottom;
  left: $left;
  right: $right;
  z-index: $zIndex;
}

@mixin style-text($font: normal 14px , $color: $color, $textShadow: inherit) {
  color: $color;
  font: $font;
  text-shadow: $textShadow;
}

@mixin style-text-transform($textTransform: uppercase, $font: normal 14px, $color: $color, $textShadow: inherit) {
  @include style-text( $font, $color, $textShadow);
  text-transform: $textTransform;
}

@mixin border-radius($px: 0) {
  -webkit-border-radius: $px;
  -moz-border-radius: $px;
  border-radius: $px;
}

@mixin box-sizing($type:border-box) {
  -webkit-box-sizing: $type;
  -moz-box-sizing: $type;
  box-sizing: $type;
}

@mixin border-radius-custom ($topleft: 5px, $topright: 5px, $bottomleft: 5px, $bottomright: 5px) {
  -webkit-border-radius: $topleft $topright $bottomright $bottomleft;
  -moz-border-radius: $topleft $topright $bottomright $bottomleft;
  border-radius: $topleft $topright $bottomright $bottomleft;
}

@mixin box-shadow-full ($x: 0px, $y: 3px, $blur: 5px, $alpha: 0.5) {
  -webkit-box-shadow: $x $y $blur rgba(0, 0, 0, $alpha);
  -moz-box-shadow: $x $y $blur rgba(0, 0, 0, $alpha);
  box-shadow: $x $y $blur rgba(0, 0, 0, $alpha);
}
@mixin gradient ($origin: left, $start: #ffffff, $stop: #000000) {
  background-color: $start;
  background-image: -webkit-linear-gradient($origin, $start, $stop);
  background-image: -moz-linear-gradient($origin, $start, $stop);
  background-image: -o-linear-gradient($origin, $start, $stop);
  background-image: -ms-linear-gradient($origin, $start, $stop);
  background-image: linear-gradient($origin, $start, $stop);
}

@mixin opacity($opacity: 0.5) {
  -moz-opacity: $opacity;
  -khtml-opacity: $opacity;
  -webkit-opacity: $opacity;
  opacity: $opacity;
  $opperc: $opacity * 100;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(opacity=${opperc})";
  filter: "alpha(opacity=${opperc})";
}

%clearfix {
  *zoom: 1;
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

@mixin hightlight-focus($color) {
  box-shadow: 0px 0px 5px $color;
  border-color: $color;
  background-color: white !important;
  font-weight: bold;
  -webkit-border-radius: 3px;
  -moz-border-radius: 3px;
  border-radius: 3px;
}
/***********psd-to-css3************/

@function pow($number, $exp) {
  $value: 1;
  @if $exp > 0 {
    @for $i from 1 through $exp {
      $value: $value * $number;
    }
  }
  @else if $exp < 0 {
    @for $i from 1 through -$exp {
      $value: $value / $number;
    }
  }
  @return $value;
}

@function fact($number) {
  $value: 1;
  @if $number > 0 {
    @for $i from 1 through $number {
      $value: $value * $i;
    }
  }
  @return $value;
}

@function pi() {
  @return 3.14159265359;
}

@function rad($angle) {
  $unit: unit($angle);
  $unitless: $angle / ($angle * 0 + 1);
  // If the angle has 'deg' as unit, convert to radians.
  @if $unit == deg {
    $unitless: $unitless / 180 * pi();
  }
  @return $unitless;
}

@function sin($angle) {
  $sin: 0;
  $angle: rad($angle);
  // Iterate a bunch of times.
  @for $i from 0 through 10 {
    $sin: $sin + pow(-1, $i) * pow($angle, (2 * $i + 1)) / fact(2 * $i + 1);
  }
  @return $sin;
}

@function cos($angle) {
  $cos: 0;
  $angle: rad($angle);
  // Iterate a bunch of times.
  @for $i from 0 through 10 {
    $cos: $cos + pow(-1, $i) * pow($angle, 2 * $i) / fact(2 * $i);
  }
  @return $cos;
}

@function tan($angle) {
  @return sin($angle) / cos($angle);
}
// based on the work of http://www.melanieceraso.com/psd-to-css3/
@function drop-shadow-converter($color: #000, $opacity: 100, $angle: 0, $distance: 0, $spread: 0, $size:0, $is-text-shadow: false) {

  // calculate angle ∠
  $__ang: (180-$angle) * 3.14 / 180; //convert to radians

  // vertical shadow: offset-y = Sin(∠) * Hypotenuse
  $__offset-y: round(sin($__ang) * $distance);

  // horizontal shadow: offset-x = Cos(∠) * Hypotenuse
  $__offset-x: round(cos($__ang) * $distance);

  // spread-radius equals the Photoshop Size multiplied by the Photoshop Spread percentage
  $__spread-rad: $size * $spread/100;

  // blur-radius is equal to the Photoshop Size minus the <spread-radius>
  $__blur-rad: $size - $__spread-rad;

  // variable for scope context
  @if ($is-text-shadow) {
    @return $__offset-x $__offset-y $__blur-rad $__spread-rad rgba(red($color), green($color), blue($color), $opacity/100);
  } @else {
    @return $__offset-x $__offset-y $__blur-rad rgba(red($color), green($color), blue($color), $opacity/100);
  }
}

@mixin bg-box($width: 1, $height: 1) {
  background-position: center;
  background-repeat: no-repeat;
  background-size: cover;
  display: block;
  &:after {
    content: "";
    padding-top: ($height/$width) * 100%;
    display: block;
  }
  img {
    display: none;
  }
}


@mixin positionG($top, $left, $width, $wG, $hG) {
  top: ($top/$hG) * 100%;
  left: ($left/$wG) * 100%;
  width: ($width/$wG) * 100%;
}
@mixin base64($data){
  background-image: url(data:image/gif;base64,#{$data})
}
@function em($pixels, $context: $font-size) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }

  @if (unitless($context)) {
    $context: $context * 1px;
  }

  @return $pixels / $context * 1em;
}
